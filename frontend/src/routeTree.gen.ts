/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminUsersImport } from './routes/admin/users'
import { Route as AdminRoomsImport } from './routes/admin/rooms'
import { Route as AdminBookingsImport } from './routes/admin/bookings'
import { Route as AdminBookingsNewImport } from './routes/admin/bookings/new'
import { Route as AdminBookingsBookingIdImport } from './routes/admin/bookings/$bookingId'
import { Route as AdminBookingsBookingIdEditImport } from './routes/admin/bookings/$bookingId/edit'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)

const AdminRoomsRoute = AdminRoomsImport.update({
  id: '/rooms',
  path: '/rooms',
  getParentRoute: () => AdminRoute,
} as any)

const AdminBookingsRoute = AdminBookingsImport.update({
  id: '/bookings',
  path: '/bookings',
  getParentRoute: () => AdminRoute,
} as any)

const AdminBookingsNewRoute = AdminBookingsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AdminBookingsRoute,
} as any)

const AdminBookingsBookingIdRoute = AdminBookingsBookingIdImport.update({
  id: '/$bookingId',
  path: '/$bookingId',
  getParentRoute: () => AdminBookingsRoute,
} as any)

const AdminBookingsBookingIdEditRoute = AdminBookingsBookingIdEditImport.update(
  {
    id: '/edit',
    path: '/edit',
    getParentRoute: () => AdminBookingsBookingIdRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/admin/bookings': {
      id: '/admin/bookings'
      path: '/bookings'
      fullPath: '/admin/bookings'
      preLoaderRoute: typeof AdminBookingsImport
      parentRoute: typeof AdminImport
    }
    '/admin/rooms': {
      id: '/admin/rooms'
      path: '/rooms'
      fullPath: '/admin/rooms'
      preLoaderRoute: typeof AdminRoomsImport
      parentRoute: typeof AdminImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof AdminImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/admin/bookings/$bookingId': {
      id: '/admin/bookings/$bookingId'
      path: '/$bookingId'
      fullPath: '/admin/bookings/$bookingId'
      preLoaderRoute: typeof AdminBookingsBookingIdImport
      parentRoute: typeof AdminBookingsImport
    }
    '/admin/bookings/new': {
      id: '/admin/bookings/new'
      path: '/new'
      fullPath: '/admin/bookings/new'
      preLoaderRoute: typeof AdminBookingsNewImport
      parentRoute: typeof AdminBookingsImport
    }
    '/admin/bookings/$bookingId/edit': {
      id: '/admin/bookings/$bookingId/edit'
      path: '/edit'
      fullPath: '/admin/bookings/$bookingId/edit'
      preLoaderRoute: typeof AdminBookingsBookingIdEditImport
      parentRoute: typeof AdminBookingsBookingIdImport
    }
  }
}

// Create and export the route tree

interface AdminBookingsBookingIdRouteChildren {
  AdminBookingsBookingIdEditRoute: typeof AdminBookingsBookingIdEditRoute
}

const AdminBookingsBookingIdRouteChildren: AdminBookingsBookingIdRouteChildren =
  {
    AdminBookingsBookingIdEditRoute: AdminBookingsBookingIdEditRoute,
  }

const AdminBookingsBookingIdRouteWithChildren =
  AdminBookingsBookingIdRoute._addFileChildren(
    AdminBookingsBookingIdRouteChildren,
  )

interface AdminBookingsRouteChildren {
  AdminBookingsBookingIdRoute: typeof AdminBookingsBookingIdRouteWithChildren
  AdminBookingsNewRoute: typeof AdminBookingsNewRoute
}

const AdminBookingsRouteChildren: AdminBookingsRouteChildren = {
  AdminBookingsBookingIdRoute: AdminBookingsBookingIdRouteWithChildren,
  AdminBookingsNewRoute: AdminBookingsNewRoute,
}

const AdminBookingsRouteWithChildren = AdminBookingsRoute._addFileChildren(
  AdminBookingsRouteChildren,
)

interface AdminRouteChildren {
  AdminBookingsRoute: typeof AdminBookingsRouteWithChildren
  AdminRoomsRoute: typeof AdminRoomsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminBookingsRoute: AdminBookingsRouteWithChildren,
  AdminRoomsRoute: AdminRoomsRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/bookings': typeof AdminBookingsRouteWithChildren
  '/admin/rooms': typeof AdminRoomsRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/bookings/$bookingId': typeof AdminBookingsBookingIdRouteWithChildren
  '/admin/bookings/new': typeof AdminBookingsNewRoute
  '/admin/bookings/$bookingId/edit': typeof AdminBookingsBookingIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/bookings': typeof AdminBookingsRouteWithChildren
  '/admin/rooms': typeof AdminRoomsRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin': typeof AdminIndexRoute
  '/admin/bookings/$bookingId': typeof AdminBookingsBookingIdRouteWithChildren
  '/admin/bookings/new': typeof AdminBookingsNewRoute
  '/admin/bookings/$bookingId/edit': typeof AdminBookingsBookingIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/bookings': typeof AdminBookingsRouteWithChildren
  '/admin/rooms': typeof AdminRoomsRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/bookings/$bookingId': typeof AdminBookingsBookingIdRouteWithChildren
  '/admin/bookings/new': typeof AdminBookingsNewRoute
  '/admin/bookings/$bookingId/edit': typeof AdminBookingsBookingIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/admin/bookings'
    | '/admin/rooms'
    | '/admin/users'
    | '/admin/'
    | '/admin/bookings/$bookingId'
    | '/admin/bookings/new'
    | '/admin/bookings/$bookingId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin/bookings'
    | '/admin/rooms'
    | '/admin/users'
    | '/admin'
    | '/admin/bookings/$bookingId'
    | '/admin/bookings/new'
    | '/admin/bookings/$bookingId/edit'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/admin/bookings'
    | '/admin/rooms'
    | '/admin/users'
    | '/admin/'
    | '/admin/bookings/$bookingId'
    | '/admin/bookings/new'
    | '/admin/bookings/$bookingId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/bookings",
        "/admin/rooms",
        "/admin/users",
        "/admin/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/admin/bookings": {
      "filePath": "admin/bookings.tsx",
      "parent": "/admin",
      "children": [
        "/admin/bookings/$bookingId",
        "/admin/bookings/new"
      ]
    },
    "/admin/rooms": {
      "filePath": "admin/rooms.tsx",
      "parent": "/admin"
    },
    "/admin/users": {
      "filePath": "admin/users.tsx",
      "parent": "/admin"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/admin/bookings/$bookingId": {
      "filePath": "admin/bookings/$bookingId.tsx",
      "parent": "/admin/bookings",
      "children": [
        "/admin/bookings/$bookingId/edit"
      ]
    },
    "/admin/bookings/new": {
      "filePath": "admin/bookings/new.tsx",
      "parent": "/admin/bookings"
    },
    "/admin/bookings/$bookingId/edit": {
      "filePath": "admin/bookings/$bookingId/edit.tsx",
      "parent": "/admin/bookings/$bookingId"
    }
  }
}
ROUTE_MANIFEST_END */
